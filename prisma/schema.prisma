generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model organisations {
  org_id        Int       @id @default(autoincrement())
  name          String
  contact_email String?
  created_at    DateTime? @default(now()) @db.Timestamp(6)
  updated_at    DateTime? @updatedAt
  users         users[]
}

model user_addresses {
  address_id    Int       @id @default(autoincrement())
  user_id       Int
  address_line1 String
  address_line2 String?
  suburb        String
  state         String
  postal_code   String
  country       String
  created_at    DateTime? @default(now()) @db.Timestamp(6)
  updated_at    DateTime? @updatedAt
  user          users?    @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model user_contacts {
  contact_id Int       @id @default(autoincrement())
  user_id    Int
  phone      String?
  mobile     String?
  fax        String?
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @updatedAt
  user       users?    @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model user_dates {
  date_id                 Int       @id @default(autoincrement())
  user_id                 Int
  probationary_date       DateTime? @db.Date
  performance_review_date DateTime? @db.Date
  created_at              DateTime? @default(now()) @db.Timestamp(6)
  updated_at              DateTime? @updatedAt
  user                    users?    @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model user_documents {
  document_id            Int       @id @default(autoincrement())
  user_id                Int
  passport_number        String?
  passport_nationality   String?
  passport_expiry_date   DateTime? @db.Date
  drivers_license_number String?
  frequent_flyer_number  String?
  created_at             DateTime? @default(now()) @db.Timestamp(6)
  updated_at             DateTime? @updatedAt
  user                   users?    @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  user_id         Int               @id @default(autoincrement())
  first_name      String
  last_name       String
  position        String?
  primary_email   String            @unique
  secondary_email String?
  description     String?
  dob             DateTime?         @db.Date
  asic            String?
  last_login      DateTime?         @db.Timestamp(6)
  updated_at      DateTime?         @updatedAt
  created_at      DateTime?         @default(now()) @db.Timestamp(6)
  org_id          Int
  role            roles             @default(BASE)
  password        String
  user_addresses  user_addresses[]
  user_contacts   user_contacts[]
  user_dates      user_dates[]
  user_documents  user_documents[]
  user_actions    action_register[]
  hazard_signoffs hazard_signoffs[]
  organisations   organisations     @relation(fields: [org_id], references: [org_id], onDelete: NoAction, onUpdate: NoAction)
  risks           risks[]
}

enum roles {
  BASE
  ADMINISTRATION
  CORPORATE
  CREWMEN
  ENGINEER
  GROUND_CREW
  HSEQ
  OPERATIONS
  PILOT
  GLOBAL_ADMINISTRATOR
}

model action_register {
  action_id           Int                @id @default(autoincrement())
  created_by          Int
  action_from         Int
  due_date            DateTime?
  status              action_status      @default(AWAITING_CORRECTIVE_ACTION)
  cause_category_id   Int
  root_cause          String?
  preventative_action String?
  corrective_action   String?
  action_required     String
  event_likelihood    event_likelihood
  event_consequence   event_consequences
  cause_categories    cause_categories   @relation(fields: [cause_category_id], references: [cause_cat_id], onDelete: NoAction, onUpdate: NoAction)
  users               users              @relation(fields: [created_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model cause_categories {
  cause_cat_id    Int                @id @default(autoincrement())
  name            String
  parent_id       Int?
  parent          cause_categories?  @relation("ParentChild", fields: [parent_id], references: [cause_cat_id])
  children        cause_categories[] @relation("ParentChild")
  action_register action_register[]
}

enum action_status {
  URGENT_ACTION
  FURTHER_ACTION
  AWAITING_CORRECTIVE_ACTION
  REVIEWING_CORRECTIVE_ACTION
  COMPLETED
  CANCELLED
}

enum action_type {
  REQUEST_FOR_CORRECTIVE_ACTION
  SUGGESTED_IMPROVEMENT
  COMPAINT
}

enum event_likelihood {
  RARE
  UNLIKELY
  POSSIBLE
  LIKELY
  ALMOST_CERTAIN
}

enum event_consequences {
  INSIGNIFICANT
  MINOR
  MODERATE
  MAJOR
  CATASTROPHIC
}

model hazards {
  hazard_id         Int      @id @default(autoincrement())
  hazard            String
  description       String
  signoffs_required Int
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  // Relation to HazardCategory
  hazard_category hazard_categories @relation(fields: [hazard_cat_id], references: [hazard_cat_id])
  hazard_cat_id   Int

  // Many-to-many relation with User through HazardSignoff
  signoff_personnel hazard_signoffs[]
}

model hazard_signoffs {
  id        Int      @id @default(autoincrement())
  hazard    hazards  @relation(fields: [hazard_id], references: [hazard_id])
  hazard_id Int
  user      users    @relation(fields: [user_id], references: [user_id])
  user_id   Int
  signed_at DateTime @default(now())

  @@unique([hazard_id, user_id])
}

model hazard_categories {
  hazard_cat_id Int       @id @default(autoincrement())
  hazards       hazards[]
}

model risks {
  risk_id                       Int                @id @default(autoincrement())
  risk_name                     String
  description                   String?
  risk_matrix_type              String // e.g., "Organisation Risk Matrix"
  likelihood                    event_likelihood
  consequence                   event_consequences
  risk_index                    String? // Calculated field, could be stored or computed
  adequacy_of_existing_controls String
  risk_priority                 String
  risk_owner                    Int // Assuming this references a user
  created_at                    DateTime           @default(now())
  updated_at                    DateTime           @updatedAt

  // Relationships
  owner          users            @relation(fields: [risk_owner], references: [user_id])
  risk_equipment risk_equipment[]
}

model risk_equipment {
  id           Int @id @default(autoincrement())
  risk_id      Int
  equipment_id Int

  risk      risks     @relation(fields: [risk_id], references: [risk_id])
  equipment equipment @relation(fields: [equipment_id], references: [equipment_id])

  @@unique([risk_id, equipment_id])
}

model equipment {
  equipment_id Int    @id @default(autoincrement())
  name         String
  // Add other relevant fields for equipment

  risks risk_equipment[]
}
